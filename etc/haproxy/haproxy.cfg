# Global settings
#---------------------------------------------------------------------
global
    log  127.0.0.1 local0 
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     20000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          300s
    timeout server          300s
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 20000

listen stats :1936
    mode http
    stats enable
    stats refresh 10s
    stats uri /


## SSL Endpoint for both the OpenShift API and the OpenShift Apps
frontend  https-in
    bind *:443
    mode tcp

    tcp-request  inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

    # we require SNI for this routes to work
    acl sni req.ssl_sni -m found

    # rule for OpenShift API and Console
    acl host_api req.ssl_sni -i openshift.192.168.124.241.xip.io

    # rule for OpenShift Applications using the wildcard DNS
    acl host_router req.ssl_sni -m sub -i apps.192.168.124.241.xip.io

    use_backend atomic-openshift-api if host_api
    use_backend atomic-openshift-router if host_router

    # todo add a default backend to direct to a 5xx error page

frontend http-in
    bind *:80
    default_backend atomic-openshift-router-http
    mode tcp
    option tcplog

    # todo, create rule for wildcard dns
    # redirect to https for API/console

backend atomic-openshift-router-http
    balance source
    mode tcp
    server      router1 192.168.124.133:80 check
    server      router2 192.168.124.36:80 check
    server      router3 192.168.124.202:80 check

## Backend for OpenShift API and Console, we are using SSL passthrough to expose OpenShiftâ€™s SSL cert
backend atomic-openshift-api
    balance source
    mode tcp

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m

    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello

    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option ssl-hello-chk

    server      master1 192.168.124.133:8443 check
    server      master2 192.168.124.36:8443 check
    server      master3 192.168.124.202:8443 check

backend atomic-openshift-router
    balance source
    mode tcp

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m

    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello

    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    option ssl-hello-chk

    server      router1 192.168.124.133:443 check
    server      router2 192.168.124.36:443 check
    server      router3 192.168.124.202:443 check
